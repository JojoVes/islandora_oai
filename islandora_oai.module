<?php

/**
 * @file
 * Module used to respond to OAI requests.
 */

use Symfony\Component\Routing\Route;

// @codingStandardsIgnoreStart
define('ISLANDORA_OAI_REQUEST_HANDLER_HOOK', 'islandora_oai_identify_request_handler');
define('ISLANDORA_OAI_ADMINISTER_PERMISSION', 'administer islandora oai');
// @codingStandardsIgnoreEnd

/**
 * Dynamic routing for OAI endpoint.
 */
function islandora_oai_routes() {
  $items['islandora_oai_oai'] = new Route(
    \Drupal::config('islandora_oai.settings')->get('islandora_oai_path'),
    [
      '_title' => 'OAI2',
      '_controller' => 'islandora_oai:oai',
    ],
    ['_permission' => 'access content']
  );

  return $items;
}

/**
 * Implements hook_islandora_oai_get_xsl_files().
 */
function islandora_oai_islandora_oai_get_xsl_files() {
  $files = file_scan_directory(drupal_get_path('module', 'islandora_oai') . '/transforms/', '/.*\.xslt?$/');

  $transform_options = [];

  foreach ($files as $file) {
    $transform_options[$file->uri] = $file->filename;
  }

  $oai_uploaded_files = [];
  $upload_path = 'public://islandora_oai_xsls';
  $uploaded_files = file_scan_directory($upload_path, '/.*\.xslt?$/');

  foreach ($uploaded_files as $up_file) {
    $oai_uploaded_files[$up_file->uri] = $up_file->filename;
  }

  foreach ($oai_uploaded_files as $key => $file) {
    if (!in_array($file, $transform_options)) {
      $transform_options[$key] = $file;
    }
  }
  return $transform_options;
}

/**
 * Implements hook_cron().
 */
function islandora_oai_cron() {
  $expire_seconds = \Drupal::config('islandora_oai.settings')->get('islandora_oai_expire_time');
  $expire_time = time() - $expire_seconds;
  db_query("DELETE FROM {islandora_oai_tokens} WHERE timestamp < :expire_time", [':expire_time' => $expire_time]);
}

/**
 * Filters the hook down to grab just the function that is being requested.
 *
 * @param string $request_type
 *   The request being requested.
 *
 * @return array
 *   An array describing the requested action.
 */
function islandora_oai_filter_function($request_type) {
  $enabled_handler = \Drupal::config('islandora_oai.settings')->get('islandora_oai_request_handler');
  if (\Drupal::moduleHandler()->moduleExists($enabled_handler)) {
    $hooks = \Drupal::moduleHandler()->invokeAll(ISLANDORA_OAI_REQUEST_HANDLER_HOOK);
    if (isset($hooks[$enabled_handler]['requests'][$request_type])) {
      return $hooks[$enabled_handler]['requests'][$request_type];
    }
    // Default back to the generic OAI implementation.
    else {
      return $hooks['islandora_oai']['requests'][$request_type];
    }
  }
}

/**
 * Implements hook_islandora_oai_identify_request_handler().
 */
function islandora_oai_islandora_oai_identify_request_handler() {
  return [
    'islandora_oai' => [
      'label' => t('Islandora OAI'),
      'description' => t('Provides a standard OAI implementation for Islandora.'),
      'configuration' => 'islandora_oai.handler_admin',
      'requests' => [
        'ListIdentifiers' => [
          'file' => drupal_get_path('module', 'islandora_oai') . '/includes/handler.inc',
          'function' => 'islandora_oai_retrieve_records_or_identifiers',
        ],
        'ListRecords' => [
          'file' => drupal_get_path('module', 'islandora_oai') . '/includes/handler.inc',
          'function' => 'islandora_oai_retrieve_records_or_identifiers',
        ],
        'ListSets' => [
          'file' => drupal_get_path('module', 'islandora_oai') . '/includes/handler.inc',
          'function' => 'islandora_oai_retrieve_sets',
        ],
        'GetRecord' => [
          'file' => drupal_get_path('module', 'islandora_oai') . '/includes/handler.inc',
          'function' => 'islandora_oai_retrieve_record',
        ],
        'response_xml' => [
          'file' => drupal_get_path('module', 'islandora_oai') . '/includes/handler.inc',
          'function' => 'islandora_oai_object_response_xml',
        ],
        'set_membership' => [
          'file' => drupal_get_path('module', 'islandora_oai') . '/includes/handler.inc',
          'function' => 'islandora_oai_get_membership',
        ],
      ],
    ],
  ];
}
